openapi: 3.0.3
info:
  title: Newsloom API
  description: API for managing news streams, sources, documents and chat interactions
  version: 1.0.0

servers:
  - url: '{protocol}://{host}:{port}'
    description: API server
    variables:
      protocol:
        enum:
          - http
          - https
        default: http
        description: The protocol to use
      host:
        default: localhost
        description: The host where the API is running
      port:
        default: "8000"
        description: The port where the API is running

components:
  securitySchemes:
    TokenAuth:
      type: http
      scheme: bearer
      bearerFormat: Token

  parameters:
    PageNumber:
      name: page
      in: query
      description: Page number for pagination
      required: false
      schema:
        type: integer
        default: 1
        minimum: 1
    PageSize:
      name: page_size
      in: query
      description: Number of items per page
      required: false
      schema:
        type: integer
        default: 10
        minimum: 1
        maximum: 100

  schemas:
    RegisterRequest:
      type: object
      required:
        - username
        - password
        - email
      properties:
        username:
          type: string
        password:
          type: string
          format: password
        email:
          type: string
          format: email
        first_name:
          type: string
        last_name:
          type: string

    PaginatedResponse:
      type: object
      properties:
        count:
          type: integer
          description: Total number of items across all pages
        next:
          type: string
          nullable: true
          description: URL to fetch the next page
        previous:
          type: string
          nullable: true
          description: URL to fetch the previous page
        results:
          type: array
          description: List of items for the current page
          items:
            type: object

    LoginRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
        password:
          type: string
          format: password

    LoginResponse:
      type: object
      properties:
        token:
          type: string
        user_id:
          type: integer
        username:
          type: string

    User:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        username:
          type: string
        email:
          type: string
          readOnly: true
        first_name:
          type: string
        last_name:
          type: string

    ChatMessage:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        chat:
          type: integer
        user:
          $ref: '#/components/schemas/User'
          readOnly: true
        message:
          type: string
        response:
          type: string
        timestamp:
          type: string
          format: date-time
          readOnly: true

    Chat:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        user:
          $ref: '#/components/schemas/User'
          readOnly: true
        title:
          type: string
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        messages:
          type: array
          items:
            $ref: '#/components/schemas/ChatMessage'
          readOnly: true

    Stream:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
        stream_type:
          type: string
        source:
          type: integer
        media:
          type: integer
        frequency:
          type: string
        configuration:
          type: object
        status:
          type: string
        last_run:
          type: string
          format: date-time
        next_run:
          type: string
          format: date-time
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        version:
          type: string

    StreamLog:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        stream:
          type: integer
        status:
          type: string
        started_at:
          type: string
          format: date-time
        completed_at:
          type: string
          format: date-time
        error_message:
          type: string
        result:
          type: object

    StreamExecutionStats:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        execution_start:
          type: string
          format: date-time
        execution_end:
          type: string
          format: date-time
        streams_attempted:
          type: integer
        streams_succeeded:
          type: integer
        streams_failed:
          type: integer
        total_execution_time:
          type: number

    Source:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
        link:
          type: string
        type:
          type: string
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true

    News:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        source:
          $ref: '#/components/schemas/Source'
          readOnly: true
        link:
          type: string
        title:
          type: string
        text:
          type: string
        created_at:
          type: string
          format: date-time
          readOnly: true
        published_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
          readOnly: true

    Doc:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        media:
          type: integer
        link:
          type: string
        google_doc_link:
          type: string
        title:
          type: string
        text:
          type: string
        status:
          type: string
        created_at:
          type: string
          format: date-time
          readOnly: true
        published_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
          readOnly: true

    Agent:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
        description:
          type: string
        provider:
          type: string
        system_prompt:
          type: string
        user_prompt_template:
          type: string
        is_active:
          type: boolean
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true

    Media:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
        sources:
          type: array
          items:
            $ref: '#/components/schemas/Source'
          readOnly: true
        examples:
          type: array
          items:
            $ref: '#/components/schemas/Examples'
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true

    Examples:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        media:
          type: integer
        text:
          type: string
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true

paths:
  /api/register/:
    post:
      tags:
        - Authentication
      summary: Register a new user
      operationId: register
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          description: Invalid registration data

  /api/token/:
    post:
      tags:
        - Authentication
      summary: Login to get authentication token
      operationId: login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          description: Invalid credentials

  /api/users/:
    get:
      tags:
        - Users
      summary: List all users
      security:
        - TokenAuth: []
      parameters:
        - $ref: '#/components/parameters/PageNumber'
        - $ref: '#/components/parameters/PageSize'
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedResponse'
                  - type: object
                    properties:
                      results:
                        type: array
                        items:
                          $ref: '#/components/schemas/User'

  /api/chats/:
    get:
      tags:
        - Chats
      summary: List user's chats
      security:
        - TokenAuth: []
      parameters:
        - $ref: '#/components/parameters/PageNumber'
        - $ref: '#/components/parameters/PageSize'
      responses:
        '200':
          description: List of chats
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedResponse'
                  - type: object
                    properties:
                      results:
                        type: array
                        items:
                          $ref: '#/components/schemas/Chat'
    post:
      tags:
        - Chats
      summary: Create a new chat
      security:
        - TokenAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Chat'
      responses:
        '201':
          description: Chat created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Chat'

  /api/messages/:
    get:
      tags:
        - Messages
      summary: List user's chat messages
      security:
        - TokenAuth: []
      parameters:
        - $ref: '#/components/parameters/PageNumber'
        - $ref: '#/components/parameters/PageSize'
      responses:
        '200':
          description: List of messages
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedResponse'
                  - type: object
                    properties:
                      results:
                        type: array
                        items:
                          $ref: '#/components/schemas/ChatMessage'
    post:
      tags:
        - Messages
      summary: Create a new message
      security:
        - TokenAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatMessage'
      responses:
        '201':
          description: Message created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatMessage'

  /api/streams/:
    get:
      tags:
        - Streams
      summary: List all streams
      security:
        - TokenAuth: []
      parameters:
        - $ref: '#/components/parameters/PageNumber'
        - $ref: '#/components/parameters/PageSize'
      responses:
        '200':
          description: List of streams
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedResponse'
                  - type: object
                    properties:
                      results:
                        type: array
                        items:
                          $ref: '#/components/schemas/Stream'
    post:
      tags:
        - Streams
      summary: Create a new stream
      security:
        - TokenAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Stream'
      responses:
        '201':
          description: Stream created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Stream'

  /api/streams/{id}/execute/:
    post:
      tags:
        - Streams
      summary: Execute a specific stream
      security:
        - TokenAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Stream execution result
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  result:
                    type: object

  /api/stream-logs/:
    get:
      tags:
        - Stream Logs
      summary: List stream logs
      security:
        - TokenAuth: []
      parameters:
        - $ref: '#/components/parameters/PageNumber'
        - $ref: '#/components/parameters/PageSize'
        - name: stream
          in: query
          schema:
            type: integer
          description: Filter by stream ID
      responses:
        '200':
          description: List of stream logs
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedResponse'
                  - type: object
                    properties:
                      results:
                        type: array
                        items:
                          $ref: '#/components/schemas/StreamLog'

  /api/stream-stats/:
    get:
      tags:
        - Stream Stats
      summary: List stream execution statistics
      security:
        - TokenAuth: []
      parameters:
        - $ref: '#/components/parameters/PageNumber'
        - $ref: '#/components/parameters/PageSize'
      responses:
        '200':
          description: List of stream execution stats
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedResponse'
                  - type: object
                    properties:
                      results:
                        type: array
                        items:
                          $ref: '#/components/schemas/StreamExecutionStats'

  /api/sources/:
    get:
      tags:
        - Sources
      summary: List all sources
      security:
        - TokenAuth: []
      parameters:
        - $ref: '#/components/parameters/PageNumber'
        - $ref: '#/components/parameters/PageSize'
      responses:
        '200':
          description: List of sources
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedResponse'
                  - type: object
                    properties:
                      results:
                        type: array
                        items:
                          $ref: '#/components/schemas/Source'
    post:
      tags:
        - Sources
      summary: Create a new source
      security:
        - TokenAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Source'
      responses:
        '201':
          description: Source created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Source'

  /api/news/:
    get:
      tags:
        - News
      summary: List all news
      security:
        - TokenAuth: []
      parameters:
        - $ref: '#/components/parameters/PageNumber'
        - $ref: '#/components/parameters/PageSize'
      responses:
        '200':
          description: List of news
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedResponse'
                  - type: object
                    properties:
                      results:
                        type: array
                        items:
                          $ref: '#/components/schemas/News'
    post:
      tags:
        - News
      summary: Create a new news item
      security:
        - TokenAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/News'
      responses:
        '201':
          description: News item created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/News'

  /api/docs/:
    get:
      tags:
        - Docs
      summary: List all docs
      security:
        - TokenAuth: []
      parameters:
        - $ref: '#/components/parameters/PageNumber'
        - $ref: '#/components/parameters/PageSize'
      responses:
        '200':
          description: List of docs
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedResponse'
                  - type: object
                    properties:
                      results:
                        type: array
                        items:
                          $ref: '#/components/schemas/Doc'
    post:
      tags:
        - Docs
      summary: Create a new doc
      security:
        - TokenAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Doc'
      responses:
        '201':
          description: Doc created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Doc'

  /api/agents/:
    get:
      tags:
        - Agents
      summary: List all agents
      security:
        - TokenAuth: []
      parameters:
        - $ref: '#/components/parameters/PageNumber'
        - $ref: '#/components/parameters/PageSize'
        - name: active_only
          in: query
          schema:
            type: boolean
          description: Filter by active agents only
      responses:
        '200':
          description: List of agents
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedResponse'
                  - type: object
                    properties:
                      results:
                        type: array
                        items:
                          $ref: '#/components/schemas/Agent'
    post:
      tags:
        - Agents
      summary: Create a new agent
      security:
        - TokenAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Agent'
      responses:
        '201':
          description: Agent created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Agent'

  /api/media/:
    get:
      tags:
        - Media
      summary: List all media
      security:
        - TokenAuth: []
      parameters:
        - $ref: '#/components/parameters/PageNumber'
        - $ref: '#/components/parameters/PageSize'
      responses:
        '200':
          description: List of media
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedResponse'
                  - type: object
                    properties:
                      results:
                        type: array
                        items:
                          $ref: '#/components/schemas/Media'
    post:
      tags:
        - Media
      summary: Create new media
      security:
        - TokenAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Media'
      responses:
        '201':
          description: Media created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Media'

  /api/media/{id}/add_source/:
    post:
      tags:
        - Media
      summary: Add source to media
      security:
        - TokenAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - source_id
              properties:
                source_id:
                  type: integer
      responses:
        '200':
          description: Source added to media
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string

  /api/media/{id}/remove_source/:
    post:
      tags:
        - Media
      summary: Remove source from media
      security:
        - TokenAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - source_id
              properties:
                source_id:
                  type: integer
      responses:
        '200':
          description: Source removed from media
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string

  /api/examples/:
    get:
      tags:
        - Examples
      summary: List all examples
      security:
        - TokenAuth: []
      parameters:
        - $ref: '#/components/parameters/PageNumber'
        - $ref: '#/components/parameters/PageSize'
        - name: media
          in: query
          schema:
            type: integer
          description: Filter by media ID
      responses:
        '200':
          description: List of examples
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedResponse'
                  - type: object
                    properties:
                      results:
                        type: array
                        items:
                          $ref: '#/components/schemas/Examples'
    post:
      tags:
        - Examples
      summary: Create a new example
      security:
        - TokenAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Examples'
      responses:
        '201':
          description: Example created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Examples'
